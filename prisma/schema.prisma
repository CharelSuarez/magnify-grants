// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String                 @id
  email            String                 @unique
  emailVerified    Boolean                @default(false)
  hashedPassword   String
  sessions         Session[]
  profile          Profile?
  verificationCode EmailVerificationCode?

  @@map("users")
}

model EmailVerificationCode {
  id        String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @unique
  code      String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("email_verification_codes")
}

model PasswordResetToken {
  id        String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @unique
  expiresAt DateTime

  @@map("password_reset_tokens")
}

model Profile {
  id        String @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String @unique
  firstName String
  lastName  String
  role      Role   @default(GRANT_USER)
  user      User   @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("profiles")
}

model Session {
  id        String   @id @unique
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("sessions")
}

model Grant {
  id                    String       @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                 String       @default("")
  description           String       @default("")
  acceptingApplications Boolean      @default(false)
  rangeLow              Int          @default(0)
  rangeHigh             Int          @default(0)
  published             Boolean      @default(false)
  organization          Organization @relation(fields: [organizationId], references: [id])
  organizationId        String       @db.Uuid
  expirationDate        DateTime?

  @@map("grants")
}

model Organization {
  id    String  @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name  String  @default("")
  Grant Grant[]

  @@map("organizations")
}

enum Role {
  GRANT_USER
  GRANT_ADMIN
  SYS_ADMIN

  @@map("role")
}

model Form {
  id     String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fields Field[]

  @@map("forms")
}

model Field {
  id      String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type    FieldType
  formId  String    @db.Uuid
  values  String[]
  values2 String[]
  form    Form      @relation(references: [id], fields: [formId], onDelete: Cascade)

  @@map("fields")
}

enum FieldType {
  ShortAnswer
  Paragraph
  MultipleChoice
  Checkbox
  Dropdown
  FileUpload
  LinearScale
  MultipleChoiceGrid
  CheckboxGrid
  Date
  Time
}
