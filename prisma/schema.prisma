generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String                 @id
  email            String                 @unique
  emailVerified    Boolean                @default(false)
  hashedPassword   String
  verificationCode EmailVerificationCode?
  profile          Profile? // TODO Make this non-optional?
  sessions         Session[]
  applications     Application[]

  @@map("users")
}

model EmailVerificationCode {
  id        String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code      String
  expiresAt DateTime
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification_codes")
}

model PasswordResetToken {
  id        String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @unique
  expiresAt DateTime

  @@map("password_reset_tokens")
}

model Profile {
  id          String    @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String    @unique
  firstName   String
  lastName    String
  dateOfBirth DateTime? // TODO Make this non-optional?
  role        Role      @default(GRANT_USER)
  user        User      @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("profiles")
}

model Session {
  id        String   @id @unique
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Grant {
  id                    String       @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                 String       @default("")
  description           String       @default("")
  acceptingApplications Boolean      @default(false)
  rangeLow              Int          @default(0)
  rangeHigh             Int          @default(0)
  published             Boolean      @default(false)
  expirationDate        DateTime?
  organization          Organization @relation(fields: [organizationId], references: [id])
  organizationId        String       @db.Uuid
  form                  Form?
  sector                Sector       @default(OTHER)
  postedDate            DateTime     @default(now())

  @@map("grants")
}

model Organization {
  id          String  @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String  @default("")
  description String  @default("")
  grants      Grant[]

  @@map("organizations")
}

model Form {
  id                         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description                String
  name                       String
  createdAt                  DateTime @default(now())
  fields                     Field[]  // TODO: Make grant required!
  grant                      Grant?   @relation(fields: [grantId], references: [id], onDelete: Cascade)
  grantId                    String?  @unique @db.Uuid
  applications Application[]

  @@map("forms")
}

model Field {
  id      String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type    FieldType
  formId  String             @db.Uuid
  options String[]
  prompt  String
  index   Int
  form    Form               @relation(fields: [formId], references: [id], onDelete: Cascade)
  entries ApplicationEntry[]

  @@map("fields")
}

enum Role {
  GRANT_USER
  GRANT_ADMIN
  SYS_ADMIN

  @@map("role")
}

enum FieldType {
  ShortAnswer
  Paragraph
  MultipleChoice
  Checkbox
  Dropdown
  FileUpload
  LinearScale
  Date
  Time
}

model Application {
  id             String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  form           Form               @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId         String             @db.Uuid
  user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  version        Int                @default(0)
  complete       Boolean            @default(false)
  status         ApplicationStatus  @default(IN_PROGRESS)
  entries        ApplicationEntry[]
  submissionDate DateTime?
  amountAwarded  Int?

  @@unique([userId, formId, version])
  @@index([userId, formId])
  @@map("applications")
}

enum ApplicationStatus {
  REJECTED
  IN_PROGRESS
  ACCEPTED

  @@map("application_status")
}

model ApplicationEntry {
  id      String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  app     Application @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId   String      @db.Uuid
  field   Field       @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId String      @db.Uuid
  value   String      @default("")

  @@unique([appId, fieldId])
  @@index([appId, fieldId])
  @@map("application_entries")
}

enum Sector {
  AGRICULTURE
  ARTS
  BUSINESS
  EDUCATION
  ENVIRONMENT
  HEALTH
  SCIENCE_TECHNOLOGY
  OTHER

  @@map("sector")
}
