generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String                 @id
  email            String                 @unique
  emailVerified    Boolean                @default(false)
  hashedPassword   String
  verificationCode EmailVerificationCode?
  profile          Profile?
  role             Role                   @default(GRANT_USER)
  sessions         Session[]
  applications     Application[]
  submissions      Submission[]

  gAdminInstance GrantAdmin?

  @@map("users")
}

model GrantAdmin {
  id             String       @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String       @unique
  organizationId String       @db.Uuid
  user           User         @relation(references: [id], fields: [userId], onDelete: Cascade)
  organization   Organization @relation(references: [id], fields: [organizationId], onDelete: Cascade)

  @@map("grant_admins")
}

model EmailVerificationCode {
  id        String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code      String
  expiresAt DateTime
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification_codes")
}

model PasswordResetToken {
  id        String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @unique
  expiresAt DateTime

  @@map("password_reset_tokens")
}

model Profile {
  id          String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String   @unique
  firstName   String
  lastName    String
  dateOfBirth DateTime @db.Date
  user        User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("profiles")
}

model Session {
  id        String   @id @unique
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Grant {
  id                    String             @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                 String             @default("")
  description           String             @default("")
  acceptingApplications Boolean            @default(false)
  rangeLow              Int                @default(0)
  rangeHigh             Int                @default(0)
  published             Boolean            @default(false)
  expirationDate        DateTime?
  organization          Organization       @relation(fields: [organizationId], references: [id])
  organizationId        String             @db.Uuid
  sector                Sector             @default(OTHER)
  postedDate            DateTime           @default(now())
  formsOnGrants         FormsOnGrants[]
  bannerAlt             String?
  requiredDocuments     RequiredDocument[]
  applications          Application[]
  submissions           Submission[]

  @@map("grants")
}

model RequiredDocument {
  id      String  @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  prompt  String
  grant   Grant?  @relation(fields: [grantId], references: [id])
  grantId String? @db.Uuid

  @@map("req_documents")
}

model FormsOnGrants {
  grant   Grant  @relation(fields: [grantId], references: [id], onDelete: Cascade)
  grantId String @db.Uuid
  form    Form   @relation(fields: [formId], references: [id] )
  formId  String @db.Uuid

  @@id(name: "formOnGrantId", [grantId, formId])
  @@map("forms_on_grants")
}

model Organization {
  id          String       @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String       @unique @default("")
  description String       @default("")
  admins      GrantAdmin[]
  grants      Grant[]
  forms       Form[]

  @@map("organizations")
}

model Form {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description    String
  name           String
  createdAt      DateTime        @default(now())
  fields         Field[]
  organization   Organization    @relation(fields: [organizationId], references: [id])
  applications   Application[]
  organizationId String          @db.Uuid
  formsOnGrants  FormsOnGrants[]

  @@map("forms")
}

model Field {
  id      String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type    FieldType
  formId  String             @db.Uuid
  options String[]
  prompt  String
  index   Int
  form    Form               @relation(fields: [formId], references: [id], onDelete: Cascade)
  entries ApplicationEntry[]

  @@map("fields")
}

enum Role {
  GRANT_USER
  GRANT_ADMIN
  SYS_ADMIN

  @@map("role")
}

enum FieldType {
  ShortAnswer
  Paragraph
  MultipleChoice
  Checkbox
  Dropdown
  LinearScale
  Date
  Time
}

model Submission {
  id             String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  grant          Grant              @relation(fields: [grantId], references: [id], onDelete: Cascade)
  grantId        String             @db.Uuid
  applications   Application[]
  status         ApplicationStatus  @default(IN_PROGRESS)
  submissionDate DateTime           @default(now())
  amountAwarded  Int?

  @@map("submissions")
}

model Application {
  id             String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  grant          Grant              @relation(fields: [grantId], references: [id], onDelete: Cascade)
  grantId        String             @db.Uuid
  form           Form               @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId         String             @db.Uuid
  user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  complete       Boolean            @default(false)
  entries        ApplicationEntry[]
  updated        DateTime           @default(now())
  submission     Submission?        @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  submissionId   String?            @db.Uuid

  @@unique([grantId, userId, formId, submissionId])
  @@index([grantId, userId, formId]) // ü§´üßè‚Äç‚ôÇÔ∏è (don't ask)
  @@index([grantId, userId, formId, submissionId])
  @@map("applications")
}

enum ApplicationStatus {
  REJECTED
  IN_PROGRESS
  ACCEPTED

  @@map("application_status")
}

model ApplicationEntry {
  app     Application @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId   String      @db.Uuid
  field   Field       @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId String      @db.Uuid
  value   String      @default("")

  @@id([appId, fieldId])
  @@map("application_entries")
}

enum Sector {
  AGRICULTURE
  ARTS
  BUSINESS
  EDUCATION
  ENVIRONMENT
  HEALTH
  SCIENCE_TECHNOLOGY
  OTHER

  @@map("sector")
}
